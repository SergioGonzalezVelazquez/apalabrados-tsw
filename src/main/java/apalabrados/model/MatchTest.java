package apalabrados.model;

// Generated by Selenium IDE

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.util.*;
import java.util.concurrent.TimeUnit;

public class MatchTest {
	private WebDriver driverP1, driverP2;

	@Before
	public void setUp() {
		// Relative path
		String path = System.getProperty("user.dir");
		System.setProperty("webdriver.chrome.driver", path + "/selenium/chromedriver.exe");

		driverP1 = new ChromeDriver();
		driverP1.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driverP2 = new ChromeDriver();
		driverP1.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	@After
	public void tearDown() {
		// driverP1.quit();
		// driverP2.quit();
	}

	private void login(WebDriver driver, String email, String pwd) throws InterruptedException {
		driver.get("http://localhost:8080/");
		driver.findElement(By.id("inputEmail")).click();
		driver.findElement(By.id("inputEmail")).sendKeys(email);
		driver.findElement(By.id("inputPwd")).click();
		driver.findElement(By.id("inputPwd")).sendKeys(pwd);
		driver.findElement(By.id("btnEntrar")).click();
		Thread.sleep(2000);
		{
			List<WebElement> elements = driver.findElements(By.id("txtBienvenido"));
			assert (elements.size() > 0);
		}
	}

	private void movement(WebDriver driver, int boardRow, int boardCol, int panelIndex) throws InterruptedException {
		// https://www.guru99.com/drag-drop-selenium.html

		// Element which needs to drag.
		WebElement From = driver.findElement(By.id("panel_" + panelIndex));

		// Element on which need to drop.
		WebElement To = driver.findElement(By.id("board_" + boardRow + "_" + boardCol));

		// Using Action class for drag and drop.
		Actions act = new Actions(driver);

		// Dragged and dropped.
		act.dragAndDrop(From, To).build().perform();

		Thread.sleep(1000);
	}

	private void pasar(WebDriver driver) {
		// Pulsa el botón pasar
		driver.findElement(By.id("btnPasar")).click();

		// comprueba que el jugador ya no tiene el turno
		WebElement txtP1Turn = driver.findElement(By.id("txtP1Turn"));
		Assert.assertEquals(false, txtP1Turn.isDisplayed());

	}
	
	private void abandonar(WebDriver dLoser, WebDriver dWinner) throws InterruptedException {
		System.out.println("abandonar");
		// Pulsar botón abandonar
		dLoser.findElement(By.id("btnRendirse")).click();
		Thread.sleep(1000);
		comprobarGanador(dWinner);
		comprobarPerdedor(dLoser);
	}
	
	private void comprobarGanador(WebDriver dWinner) {
		//comprueba que en el ganador ha salido la notificación de ganar
		WebElement modalWinner = dWinner.findElement(By.id("dialogWinner"));
		Assert.assertEquals(true, modalWinner.isDisplayed());
	}
	
	private void comprobarPerdedor(WebDriver dLoser) {
		//comprueba que en el perdedor ha salido la notificación de perder
		WebElement modalLoser = dLoser.findElement(By.id("dialogLoser"));
		Assert.assertEquals(true, modalLoser.isDisplayed());
	}
	
	private void llamar(WebDriver driver) {
		// Pulsa el botón pasar
		driver.findElement(By.id("btnLlamar")).click();
	}
	
	private void comprobarValor(WebDriver driver, String elementId,  String valor) {
		WebElement txtPuntos = driver.findElement(By.id(elementId));
		
	}

	private void play(WebDriver driver, boolean isValid) throws InterruptedException {
		WebElement txtP1Turn = driver.findElement(By.id("txtP1Turn"));

		// Pulsa el botón jugar
		driver.findElement(By.id("btnJugar")).click();

		if (isValid) {
			// Espera a que aparezca el modal para confirmar jugada
			{
				WebDriverWait wait = new WebDriverWait(driver, 30);
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("jugadaModal")));
			}
			// Confirma jugada
			driver.findElement(By.id("btnConfirmarJugada")).click();
			Thread.sleep(1000);
			
			//El jugador ya no tiene el turno
			Assert.assertEquals(false, txtP1Turn.isDisplayed());
		} else {
			//El jugador sigue teniendo el turno
			Thread.sleep(1000);
			Assert.assertEquals(true, txtP1Turn.isDisplayed());
		}
	}
	
	@Test
	public void testPartidaCompleta() throws InterruptedException {
		// Login P1
		login(driverP1, "pepe@mail.com", "pepe");

		// El jugador 1 crea partida
		driverP1.findElement(By.id("btnCrearPartida")).click();

		// Login P2
		login(driverP2, "ana@mail.com", "ana");

		// P2 se une a la partida
		driverP2.findElement(By.id("btnUnirPartida")).click();

		// P1 forma la palabra ESCUDO
		movement(driverP1, 7, 4, 4); // E
		movement(driverP1, 7, 5, 0); // S
		movement(driverP1, 7, 6, 1); // C
		movement(driverP1, 7, 7, 6); // U
		movement(driverP1, 7, 8, 3); // D
		movement(driverP1, 7, 9, 2); // O

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// P2 forma CERA
		movement(driverP2, 8, 6, 1); // E
		movement(driverP2, 9, 6, 0); // R
		movement(driverP2, 10, 6, 2); // A

		// P2 pulsa jugar y confirma su jugada
		play(driverP2, true);

		// P1 forma la palabra RETAN
		movement(driverP1, 9, 7, 0); // E
		movement(driverP1, 9, 8, 2); // T
		movement(driverP1, 9, 9, 3); // A
		movement(driverP1, 9, 10, 1); // N

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// P2 forma SALID
		movement(driverP2, 3, 8, 0); // S
		movement(driverP2, 4, 8, 4); // A
		movement(driverP2, 5, 8, 6); // L
		movement(driverP2, 6, 8, 5); // I

		// P2 pulsa jugar y confirma su jugada
		play(driverP2, true);

		// P1 forma la palabra AIRE
		movement(driverP1, 4, 4, 2); // A
		movement(driverP1, 5, 4, 1); // I
		movement(driverP1, 6, 4, 0); // R

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// CASO ESPECIAL: Probar palabras con Ñ
		// P2 forma PIÑA
		movement(driverP2, 5, 3, 2); // P
		movement(driverP2, 5, 5, 0); // Ñ
		movement(driverP2, 5, 6, 4); // A

		// P2 pulsa jugar y confirma su jugada
		play(driverP2, true);

		// CASO ESPECIAL: Probar nombres propios
		// P1 forma Sonia
		movement(driverP1, 3, 9, 3); // O
		movement(driverP1, 3, 10, 1); // N
		movement(driverP1, 3, 11, 2); // I
		movement(driverP1, 3, 12, 4); // A

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// CASO ESPECIAL: P2 pasa su turno
		pasar(driverP2);

		//P1 forma palabra que no existe (LM)
		movement(driverP1, 2, 10, 2); // ZN
		play(driverP1, false);
		

		// CASO ESPECIAL: P1 llama a sus letras y forma otra palabra (LA)
		llamar(driverP1);
		Thread.sleep(1000);
		movement(driverP1, 2, 12, 0); // LA
		play(driverP1, true);
		

		//P2 juega LAVARON
		movement(driverP2, 4, 12, 5); // V
		movement(driverP2, 5, 12, 3); // A
		movement(driverP2, 6, 12, 4); // R
		movement(driverP2, 7, 12, 0); // O
		movement(driverP2, 8, 12, 6); // N
		play(driverP2, true);
		
		//P1 juega LAS
		movement(driverP1, 5, 9, 0); // A
		movement(driverP1, 5, 10, 1); // S
		
		comprobarValor(driverP1, "txtP1Score", "36");
		comprobarValor(driverP2, "txtP1Score", "57");
		
		//No hay fichas restantes
		comprobarValor(driverP1, "txtFichasRestantes", "0");
		
		play(driverP1, true);

		Thread.sleep(2000);		
		//La partida debe haber finalizado porque no hay más letras en el servidor
		comprobarGanador(driverP2);
		comprobarPerdedor(driverP1);
		

	}

	@Test
	public void testRendirse() throws InterruptedException {
		// Login P1
		login(driverP1, "pepe@mail.com", "pepe");

		// El jugador 1 crea partida
		driverP1.findElement(By.id("btnCrearPartida")).click();

		// Login P2
		login(driverP2, "ana@mail.com", "ana");

		// P2 se une a la partida
		driverP2.findElement(By.id("btnUnirPartida")).click();

		// P1 forma la palabra ESCUDO
		movement(driverP1, 7, 4, 4); // E
		movement(driverP1, 7, 5, 0); // S
		movement(driverP1, 7, 6, 1); // C
		movement(driverP1, 7, 7, 6); // U
		movement(driverP1, 7, 8, 3); // D
		movement(driverP1, 7, 9, 2); // O

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// P2 forma CERA
		movement(driverP2, 8, 6, 1); // E
		movement(driverP2, 9, 6, 0); // R
		movement(driverP2, 10, 6, 2); // A

		// P2 pulsa jugar y confirma su jugada
		play(driverP2, true);

		// P1 forma la palabra RETAN
		movement(driverP1, 9, 7, 0); // E
		movement(driverP1, 9, 8, 2); // T
		movement(driverP1, 9, 9, 3); // A
		movement(driverP1, 9, 10, 1); // N

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// P2 forma SALID
		movement(driverP2, 3, 8, 0); // S
		movement(driverP2, 4, 8, 4); // A
		movement(driverP2, 5, 8, 6); // L
		movement(driverP2, 6, 8, 5); // I

		// P2 pulsa jugar y confirma su jugada
		play(driverP2, true);

		// P1 forma la palabra AIRE
		movement(driverP1, 4, 4, 2); // A
		movement(driverP1, 5, 4, 1); // I
		movement(driverP1, 6, 4, 0); // R

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// CASO ESPECIAL: Probar palabras con Ñ
		// P2 forma PIÑA
		movement(driverP2, 5, 3, 2); // P
		movement(driverP2, 5, 5, 0); // Ñ
		movement(driverP2, 5, 6, 4); // A

		// P2 pulsa jugar y confirma su jugada
		play(driverP2, true);

		// CASO ESPECIAL: Probar nombres propios
		// P1 forma Sonia
		movement(driverP1, 3, 9, 3); // O
		movement(driverP1, 3, 10, 1); // N
		movement(driverP1, 3, 11, 2); // I
		movement(driverP1, 3, 12, 4); // A

		// P1 pulsa jugar y confirma su jugada
		play(driverP1, true);

		// CASO ESPECIAL: P2 forma palabra que no existe
		movement(driverP2, 5, 7, 6); // X
		movement(driverP2, 5, 9, 5); // T
		play(driverP2, false);

		// CASO ESPECIAL: P2 pasa su turno
		pasar(driverP2);

		// CASO ESPECIAL: P1 forma palabra que no existe (LM)
		movement(driverP1, 2, 10, 2); // ZN
		play(driverP1, false);
		

		// CASO ESPECIAL: P1 llama a sus letras y forma otra palabra (LA)
		llamar(driverP1);
		movement(driverP1, 2, 12, 0); // LA
		play(driverP1, true);
		

		// CASO ESPECIAL: P2 Abandona la partida
		abandonar(driverP2, driverP1);
	}

}
